//
//  main.cpp
//  advanced-programming
//
//  Created by Daniel Tompkins on 20/01/2025.
//

#include <iostream> // include iostream to allow inputs and outputs
#include "wave_solver.hpp"  // include solver class
#include "solution_visualiser.hpp" // include visualisation class

// set up main function
int main() {
    // declare variables for simulation parameters as double precision floats and integers
    double c, dx, dy, dt;
    int nx, ny, nt;

    // prompt the user to enter parameters
    std::cout << "Enter wave speed (km/s): ";
    std::cin >> c;

    std::cout << "Enter grid spacing in x (km): ";
    std::cin >> dx;

    std::cout << "Enter grid spacing in y (km): ";
    std::cin >> dy;

    std::cout << "Enter time step (s): ";
    std::cin >> dt;

    std::cout << "Enter number of grid points in x: ";
    std::cin >> nx;

    std::cout << "Enter number of grid points in y: ";
    std::cin >> ny;

    std::cout << "Enter number of time steps: ";
    std::cin >> nt;

    // create an instance of the solver class
    WaveSolver2D solver(c, dx, dy, dt, nx, ny, nt);

    // call function to initialise solution
    solver.initialiseSolution();

    // call function to solve for given parameters
    solver.solve();

    // call function to save the full solution data - must pass a path to the name/location you wish to save it is
    solver.saveSolution("/Users/danieltompkins/Documents/programming-coursework/solution.txt");

    // confirmation that the solution has been saved
    std::cout << "Solution saved to solution.txt" << std::endl;

    // create an instance of the visualiser class, loading the solution data that has just been saved
    // you must pass the same filepath where you saved the solution along with the variables nx, ny and nt from above
    Visualiser vis("/Users/danieltompkins/Documents/programming-coursework/solution.txt", nx, ny, nt);
    if (!vis.loadSolution()) {
        std::cerr << "Error loading solution file." << std::endl; // return an error if data cannot be loaded
        return -1;
    }
    
    // display an interactive 3d plot of the solution at the final timestep, opens in a GNU Plot window
    //vis.showFinalTimeStep();
    
    // save a 3d plot of the solution at the final timestep in a location of your choice
    vis.saveFinalTimeStep("/Users/danieltompkins/Documents/programming-coursework/final_timestep.png");
    
    // save an animation of the solution evolution as an mp4
    // the first 4 arguments specify the domain size in x and y respectively (i.e. 0 to 10 in both)
    // fifth argument specifies the pause between frames in seconds (higher means greater pause and less smooth animation)
    // final argument is the filepath where you would like to save the mp4
    vis.showAnimation(0.0, 10.0, 0.0, 10.0, 0.03, "/Users/danieltompkins/Documents/programming-coursework/solution_evolution.mp4");;

    return 0;
}
